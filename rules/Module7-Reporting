# vim: set filetype=sh :

rule R_finalReport:
    """
    Create the final report (R).
    """
    input:
        script=config["report-script"],
        fa="%s/FASTQ/TRIMMED/GSC.vcf.fa" % (config["project-folder"]),
        mockToRef="%s/BAM/Mockref/mockToRef.sorted.bam" % (config["project-folder"]),
        mockToRefSamflags="%s/BAM/Mockref/mockToRef.sam.samflags" % (config["project-folder"]), 
        mockFlagstats=expand("%s/FASTQ/TRIMMED/alignments/{samples}.sam.flagstat" % (config["project-folder"]), samples=samples),
        c=expand("%s/FASTQ/TRIMMED/alignments_clusters/{samples}.coverage" % (config["project-folder"]), samples=samples),
        mqcraw="%s/QC/RAW/multiqc_R1/" % (config["project-folder"]),
        mqcconcatenated="%s/QC/CONCATENATED/multiqc_R1/" % (config["project-folder"]),
        mqctrimmed="%s/QC/TRIMMED/multiqc_R1/" % (config["project-folder"]),
        faRef="%s/MPILEUP/mpileup_reference/GSC.vcf.fa" % (config["project-folder"]),
        qdRaw=expand("%s/QC/RAW/{rawsamples}_R1_qualdist.txt" % (config["project-folder"]), rawsamples=rawsamples),
        qdConc=expand("%s/QC/CONCATENATED/{samples}_R1_qualdist.txt" % (config["project-folder"]), samples=samples),
        qdTrimmed=expand("%s/QC/TRIMMED/{samples}_R1_qualdist.txt" % (config["project-folder"]), samples=samples),
        fsFinal=expand("%s/BAM/alignments_finalMock/{samples}.sam.flagstat" % (config["project-folder"]), samples=samples),
        fsFinalVsRef="%s/BAM/FinalMockref/mockToRef.sam.flagstat" % (config["project-folder"]),
        finalSetVariants="%s/VCF/FinalSetVariants_finalMock.vcf" % (config["project-folder"]),
        fsRef=expand("%s/FASTQ/TRIMMED/alignments_reference/{samples}.sam.flagstat" % (config["project-folder"]), samples=samples),
        cRef=expand("%s/FASTQ/TRIMMED/alignments_reference/{samples}.coverage" % (config["project-folder"]), samples=samples),
        cFinalMock=expand("%s/BAM/alignments_finalMock/{samples}.coverage" % (config["project-folder"]), samples=samples)
    output:
        "%s/finalReport.html" % (config["project-folder"])
    log:
        "%s/logs/R/finalReport.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/R/finalReport.benchmark.tsv" % (config["project-folder"])
    singularity:
        config["singularity"]["r-gbs"]
    params:
       projFolder=config["project-folder"],
       pipeFolder=config["pipeline-folder"],
       pipeConfig=config["pipeline-config"],
       refGenome=config["genome"]
    shell:"""
       R -e "projFolder <- '{params.projFolder}'; \
             pipelineFolder <- '{params.pipeFolder}'; \
             refGenome.file <- '{params.refGenome}'; \
             pipelineConfig.file <- '{params.pipeConfig}'; \
             snakemake <- TRUE;\
             rmarkdown::render('{input.script}',output_file='{output}')" &> {log}
    """

rule R_MockEval:
    """
    Create the mock evaluation report (R).
    """
    input:
        "%s/MockReference/MockReference.fa" % (config["project-folder"]),
        "%s/FASTQ/TRIMMED/GSC.MR.Clusters.fa" % (config["project-folder"]),
        expand("%s/BAM/alignments_finalMock/{samples}.sam.flagstat" % (config["project-folder"]), samples=samples),
        expand("%s/FASTQ/TRIMMED/alignments_clusters/{samples}.sam.flagstat" % (config["project-folder"]), samples=samples),
        script=config["mockeval-script"]
    output:
        "%s/mockEvalReport.html" % (config["project-folder"])
    log:
        "%s/logs/R/mockEvalReport.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/R/mockEvalReport.benchmark.tsv" % (config["project-folder"])
    singularity:
        config["singularity"]["r-gbs"]
    params:
       projFolder=config["project-folder"],
       pipeFolder=config["pipeline-folder"],
       pipeConfig=config["pipeline-config"]
    shell:"""
       R -e "projFolder <- '{params.projFolder}'; \
             pipelineFolder <- '{params.pipeFolder}'; \
             pipelineConfig.file <- '{params.pipeConfig}'; \
             snakemake <- TRUE;\
             rmarkdown::render('{input.script}',output_file='{output}')" &> {log}
    """